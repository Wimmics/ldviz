<!DOCTYPE html>
<html lang="en">

<head>
    
    <%- include("ldviz/partials/head") %>

    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>LDViz</title>
</head>

<body class='body'>
    <div class="header">
        <h1>Linked Data Visualizer: Coverage Analysis</h1>
        <%- include("ldviz/partials/header") %>
    </div>

    <p>We ran a coverage analysis that tested 419 different SPARQL endpoints retrieved from IndeGx (Maillot et al., 2022) to identify whether the SPARQL result set could be visualized by our tool. </p>

    <h3>The SPARQL result set format supported by LDViz</h3>
    Our application uses the data format proposed by the <a href="https://www.w3.org/TR/2013/REC-sparql11-results-json-20130321/">W3C Recommendation</a> to represent SPARQL select query results using JSON. The data format looks like the following:

    <pre id="json-renderer">
    {
        head: { 
            link: [], vars: [ "s", "p", "o", "label", "type", "date" ] },
        results: { 
            distinct: false, 
            ordered: true, 
            bindings: [
                {s: { type: "literal", xml:lang: "en", value: "Maximilian Schell" },
                p: { type: "uri", value: http://dbpedia.org/resource/A_Bridge_Too_Far_(film)},
                o: { type: "literal", xml:lang: "en", value: "Dirk Bogarde"},
                label: { type: "literal", xml:lang: "en", value: "A Bridge Too Far (film)"},
                type: { type: "literal", xml:lang: "en", value: "non-fiction" },
                date: { type: "typed-literal", 
                datatype: http://www.w3.org/2001/XMLSchema#date, 
                value: "1977-06-15" }}
            ] 
        } 
    }
    </pre>
    
    You find more about the format at <a href="https://www.w3.org/TR/2013/REC-sparql11-results-json-20130321/">https://www.w3.org/TR/2013/REC-sparql11-results-json-20130321/</a>.
        
    <h3>The SPARQL endpoints used in the analysis</h3>
    IndeGx is a framework designed to index public KGs that are available online through a SPARQL endpoint. The indexing process uses SPARQL queries to either extract the available metadata from a KG or to generate as much metadata as the endpoint allows it. The results of this indexing process are publicly available through a SPARQL endpoint at <a href="http://prod-dekalog.inria.fr/sparql">http://prod-dekalog.inria.fr/sparql</a>, from which we retrieved the list of endpoints using the query below: <br><br>

    <code>
        prefix index: &lt;http://ns.inria.fr/kg/index\#&gt;<br>
        prefix desc: &lt;http://www.w3.org/ns/sparql-service-description\#&gt; <br>
        SELECT DISTINCT ?endpointUrl where {  <br>
        &nbsp;    GRAPH ?g {  ?metadata index:curated ?dataset . <br>
        &nbsp;&nbsp;        ?dataset desc:endpoint ?endpointUrl .  <br>
        &nbsp;}  <br>
        } <br>
    </code>
    <br>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                <a data-toggle="collapse" href="#collapse1">List of SPARQL endpoints used in the analysis (click to reveal)</a> <i class="fa-solid fa-angle-down"></i>
                </h4>
            </div>
            <div id="collapse1" class="panel-collapse collapse">
                <% for (let i = 0; i < locals.endpoints.length; i++) { %>
                <div class="panel-body">
                    <%= locals.endpoints[i] %>
                </div>
                <% } %>
            </div>
        </div>
    </div>

    <h3>Procedure</h3>
    We used a set of queries that support RDF graph/vocabulary inspection and RDF summarizations exploration, defined as follows.
    
    <h4>SPARQL query templates defined to inspect RDF graph and vocabulary through</h4>

    <ul>
        <li>
            the RDF graph <br><br>
            <code>
                select * where { ?s ?p ?o } 
            </code>
        </li>
        <li>
            the hierarchy of classes <br><br>
            <code>
                prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br>
                select * where {  <br>
                    &nbsp;    ?s ?p ?o <br>
                    &nbsp;filter(?p = rdfs:subClassOf) <br>
                }
            </code>

        </li>
        <li>
            the hierarchy of properties <br><br>
            <code>
                prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br>
                select * where { <br>
                    &nbsp;?s ?p ?o <br>
                    &nbsp;filter(?p = rdfs:subPropertyOf) <br>
                }
            </code>
        </li>
        <li>
            the signature of properties <br><br>
            <code>
                prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br>
                select * where { <br>
                    &nbsp;?s ?p ?o <br>
                    &nbsp; filter(?p = rdfs:domain || ?p = rdfs:range)}  <br>
                }
            </code>
        </li>
    </ul>
    
    <h4>SPARQl query templates defined to explore RDF summarizations through</h4>

    <ul>
        <li>
            the class paths <br><br>
            <code>
                select distinct ?s ?p ?o <br>
                where { <br>
                    &nbsp;?a ?p ?b . ?a a ?s . ?b a ?o <br>
                } 
            </code>
        </li>
        <li>
            the property paths <br><br>
            <code>
                prefix ldv: &lt;http://ldv.fr/path/&gt;<br>
                select distinct ?s (ldv: as ?p) ?o <br>
                where { <br>
                    &nbsp; ?x ?s ?y . ?y ?o ?z . <br>
                    &nbsp; filter (?s != ?o) <br>
                } 
            </code>
        </li>
        <li>
            the paths of form class &rarr; property &rarr; class <br><br>
            <code>
                prefix ldv: &lt;http://ldv.fr/path/&gt;<br>
                select distinct ?s (ldv: as ?p) ?o <br>
                where { <br>
                    &nbsp; { ?a ?b ?c. ?a a ?s . <br>
                        &nbsp;&nbsp;     bind (?b as ?o) } <br>
                        &nbsp; UNION <br>
                        &nbsp;  { ?a ?b ?c. ?c a ?s .  <br>
                            &nbsp;&nbsp;   bind (?b as ?o) } <br>
                }
            </code>
        </li>
    </ul>
    
    These queries are rather generic and can be applied to any SPARQL endpoint. The only specific vocabulary used by these queries is the RDF Schema, which provides a data modeling vocabulary for RDF data and would be therefore expected to appear in most RDF graphs. We limited each query to 10 solutions to speed up the process, as our goal was to inspect the resulting data format to check whether we could visualize it using LDViz; the actual data was not important for this analysis. A request would have mainly two possible outcomes:
    <ul>
        <li>
            In case of a successful request, we inspect the resulting data format to verify whether it matches the SPARQL JSON result set defined by W3C Recommendation. If the data does not match the expected format, we inspect it further to identify its format, which may sometimes be HTML or CSV, for instance.
        </li>
        <li>
            In case of a failed request, we inspect the error thrown to understand why we were unable to retrieve data from that particular endpoint.
        </li>
    </ul>
     
    <h3>Results</h3>

    About 41.77% of the SPARQL endpoints returned a valid result set that could be explored using LDViz. We noticed that the queries seeking for class and property hierarchy, and signature of properties were slightly less successful than the remaining, where only about 38.19\% of SPARQL endpoints returned a valid result set. Regarding the issues found while querying the SPARQL endpoints, we could identify 11 different reasons for why it cannot be explored using LDViz, described as follows:

    <ul>
        <li> <b>HTML</b>: About 16.06% of the requests returned an HTML object, which may contain valid results from the SPARQL endpoint, but cannot be processed by the LDViz transformation engine. </li>
        <li><b>Service Not Found</b>: The SPARQL endpoint could not be found (request status 404 and 410). We encountered this issue in about 14.18% of requests.</li>
        <li><b>Service Unreachable</b>: This issue is identified when the connection is refused by the server (throwing the ECONNREFUSED error), or the protocol encountered an unrecoverable error for that endpoint (throwing the EPROTO error). On average, 7.06% of requests encountered this issue. We noticed that this issue appeared slightly more often for the SPARQL query recovering the RDF summarization through class paths then for the remaining, where we observed the issue in 8.59% of requests.  </li>
        <li> <b>Timeout</b>: About 6.27% of the requests encountered a timeout issue. This is due to the request response not being received within the default timeout of the fetch request, which is of about 300 seconds (request statuses 408 and 504) or the Virtuoso server estimating the query processing time to be longer than its established timeout of 400 seconds. </li>
        <li> <b>No results</b>: This issue means that the request returned a valid JSON object, but the \texttt{bindings} array was empty. In average, 4.30% of SPARQL endpoints did not provide results to our queries. However, once again, we observe that this number is higher for SPARQL queries seeking for the signature of properties, class, and property hierarchies, where we observe that about 8.35% of endpoints did not provide results against an average of only 1.25% of endpoints not providing results for the remaining queries. </li>
        <li> <b>Invalid Certificate</b>: The request could not be completed due to an invalid certificate on the SPARQL endpoint side. This issue was observed in about 3.10\% of requests, which correspond to 13 SPARQL endpoints. </li>
        <li> <b>CSV</b>: On average, 2.18% of the requests returned a string object which content follows a CSV format. The result set may contain valid data but cannot be processed by the LDViz transformation engine. </li>
        <li> <b>Bad Request</b>: The request could not be fulfilled due to bad syntax (request status 400). This error was thrown by 2.18% of requests, which correspond to 9 to 11 SPARQL endpoints. We could observe that the SPARQL queries seeking for the RDF graph and an RDF graph summarization through class paths were slightly less affected than the remaining. </li>
        <li> <b>Format Not Supported</b>: Requests for 6 different SPARQL endpoints have responded with this error (1.43% of requests), which means that the server can only generate a response that is not accepted by the client (status 406). </li>
        <li> <b>Access Unauthorized</b>: This issue encompasses the following request responses: the server refuses to respond (status 401 and 403), and authentication is required (status 407 and 511). We observed that three endpoints (0.95\% of requests -- 4 SPARQL endpoints) required authentication, which we could not provide. </li>
        <li> <b>Not W3C compliant</b>: The request responded with a JSON object that does not follow the JSON format specified by the W3C Recommendation. This issue was observed in 2 SPARQL endpoints (0.48%).</li>
    </ul>

    <h4>Visualization of results</h4>
    The TreeMap graph below shows the distribution of different responses obtained while querying 419 SPARQL endpoints. The top level of the TreeMap graph contains seven rectangles each of which covers a specific query type (i.e Paths &rarr; Properties &rarr; Class, Class paths, Class hierarchy, RDF graph, property hierarchy, signature of properties, and properties path). These rectangles are further divided in smaller colored rectangles that summarize the results obtained per query type including SPARQL endpoints supported by LDViz and issues encountered while accessing the endpoints (e.g., Access Unauthorized, Service not found, etc.). The size of the rectangle encodes the number of results obtained for each query. 

    <div id="treemap"></div>
    
    <footer >
        <p class="f3">
            <a href="/ldviz">Home</a>
        </p>
    </footer>
</body>

<script>
    let data = <%- JSON.stringify(result) %>;

    let margin = {top: 10, right: 10, bottom: 50, left: 10},
        width = window.innerWidth * .9 - margin.left - margin.right,
        height = 600 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    let svg = d3.select("#treemap")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

    let nestedData = d3.nest()
        .key(d => d.queryTitle)
        .entries(data)

    let hierarchy = nestedData.map(d => {
        return {
            'name': d.key,
            'children': d.values.map(d => { return { name: d.issue, value: d.count }})
        }
    })
    
    // Give the data to this cluster layout:
    var root = d3.hierarchy({ children: hierarchy }).sum(function(d){ return d.value}) // Here the size of each leave is given in the 'value' field in input data

    // Then d3.treemap computes the position of each element of the hierarchy
    d3.treemap()
        .size([width, height])
        .paddingTop(28)
        .paddingRight(7)
        .paddingInner(3)      // Padding between each rectangle
        (root)

    // prepare a color scale
    var color = d3.scaleOrdinal()
        .domain(["boss1", "boss2", "boss3"])
        .range([ "#402D54", "#D18975", "#8FD175"])

    // And a opacity scale
    var opacity = d3.scaleLinear()
        .domain([10, 30])
        .range([.5,1])

    // use this information to add rectangles:
    svg.selectAll("rect")
        .data(root.leaves())
        .enter()
        .append("rect")
        .attr('x', function (d) { return d.x0; })
        .attr('y', function (d) { return d.y0; })
        .attr('width', function (d) { return d.x1 - d.x0; })
        .attr('height', function (d) { return d.y1 - d.y0; })
        .style("stroke", "black")
        .style("fill", function(d){ return color(d.parent.data.name)} )
        .style("opacity", function(d){ return opacity(d.data.value)})
        .append('title')
        .text(d => `Query ${d.parent.data.name}\n${d.data.name}: ${d.data.value} SPARQL endpoints`)

    // and to add the text labels
    svg.selectAll("text")
        .data(root.leaves())
        .enter()
        .append("text")
        .attr("x", function(d){ return d.x0+2})    // +10 to adjust position (more right)
        .attr("y", function(d){ return d.y0+20})    // +20 to adjust position (lower)
        .text(d => d.data.name)
        .attr("font-size", "12px")
        .attr("fill", "white")
        .call(text =>
            text.style("display", function(d, idx) {
                let thiswidth = this.getComputedTextLength()
                
                let element = svg.selectAll('rect').filter(e => e.data.name === d.data.name && e.parent.data.name === d.parent.data.name).node()
                
                let rect = element.getBoundingClientRect();
               
                if (thiswidth > rect.width) return "none";
                return "block";
            })
        )


    // and to add the text labels
    svg.selectAll("vals")
        .data(root.leaves())
        .enter()
        .append("text")
        .attr("x", function(d){ return d.x0+5})    // +10 to adjust position (more right)
        .attr("y", function(d){ return d.y0+35})    // +20 to adjust position (lower)
        .text(function(d){ return d.data.value })
        .attr("font-size", "11px")
        .attr("fill", "white")
        .call(text =>
            text.style("display", function(d, idx) {
                let thiswidth = this.getComputedTextLength()
                
                let element = svg.selectAll('rect').filter(e => e.data.name === d.data.name && e.parent.data.name === d.parent.data.name).node()
                let sibling = svg.selectAll('text').filter((e,i) => i !== idx && e.data.name === d.data.name && e.parent.name === d.parent.name).node()
                
                let parentwidth = d.x1 - d.x0,
                    parentheight = d.y1 - d.y0;
               
                if (thiswidth > parentwidth || d.x0 > d.parent.x0 + parentwidth || 
                    d.y0 + 35 > d.parent.y0 + parentheight || sibling.style.display === 'none') return "none";
                return "block";
            })
        )


    // Add title for the 3 groups
    svg.selectAll("titles")
        .data(root.descendants().filter(function(d){return d.depth==1}))
        .enter()
        .append("text")
        .attr("x", function(d){ return d.x0})
        .attr("y", function(d){ return d.y0+21})
        .text(function(d){ return d.data.name })
        .attr("font-size", "19px")
        .attr("fill",  function(d){ return color(d.data.name)} )

</script>

</html>